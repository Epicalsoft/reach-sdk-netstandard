<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akavache.Core</name>
    </assembly>
    <members>
        <member name="T:Akavache.BitmapImageMixin">
            <summary>
            Provides extension methods associated with the <see cref="T:Splat.IBitmap" /> interface.
            </summary>
        </member>
        <member name="M:Akavache.BitmapImageMixin.LoadImage(Akavache.IBlobCache,System.String,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Load an image from the blob cache.
            </summary>
            <param name="blobCache">The blob cache to load the image from.</param>
            <param name="key">The key to look up in the cache.</param>
            <param name="desiredWidth">Optional desired width, if not specified will be the default size.</param>
            <param name="desiredHeight">Optional desired height, if not specified will be the default size.</param>
            <returns>A Future result representing the bitmap image. blobCache
            Observable is guaranteed to be returned on the UI thread.</returns>
        </member>
        <member name="M:Akavache.BitmapImageMixin.LoadImageFromUrl(Akavache.IBlobCache,System.String,System.Boolean,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.DateTimeOffset})">
            <summary>
            A combination of DownloadUrl and LoadImage, this method fetches an
            image from a remote URL (using the cached value if possible) and
            returns the image.
            </summary>
            <param name="blobCache">The blob cache to load the image from if available.</param>
            <param name="url">The URL to download.</param>
            <param name="fetchAlways">If we should always fetch the image from the URL even if we have one in the blob.</param>
            <param name="desiredWidth">Optional desired width, if not specified will be the default size.</param>
            <param name="desiredHeight">Optional desired height, if not specified will be the default size.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A Future result representing the bitmap image. blobCache
            Observable is guaranteed to be returned on the UI thread.</returns>
        </member>
        <member name="M:Akavache.BitmapImageMixin.LoadImageFromUrl(Akavache.IBlobCache,System.Uri,System.Boolean,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.DateTimeOffset})">
            <summary>
            A combination of DownloadUrl and LoadImage, this method fetches an
            image from a remote URL (using the cached value if possible) and
            returns the image.
            </summary>
            <param name="blobCache">The blob cache to load the image from if available.</param>
            <param name="url">The URL to download.</param>
            <param name="fetchAlways">If we should always fetch the image from the URL even if we have one in the blob.</param>
            <param name="desiredWidth">Optional desired width, if not specified will be the default size.</param>
            <param name="desiredHeight">Optional desired height, if not specified will be the default size.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A Future result representing the bitmap image. blobCache
            Observable is guaranteed to be returned on the UI thread.</returns>
        </member>
        <member name="M:Akavache.BitmapImageMixin.LoadImageFromUrl(Akavache.IBlobCache,System.String,System.String,System.Boolean,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.DateTimeOffset})">
            <summary>
            A combination of DownloadUrl and LoadImage, this method fetches an
            image from a remote URL (using the cached value if possible) and
            returns the image.
            </summary>
            <param name="blobCache">The blob cache to load the image from if available.</param>
            <param name="key">The key to store with.</param>
            <param name="url">The URL to download.</param>
            <param name="fetchAlways">If we should always fetch the image from the URL even if we have one in the blob.</param>
            <param name="desiredWidth">Optional desired width, if not specified will be the default size.</param>
            <param name="desiredHeight">Optional desired height, if not specified will be the default size.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A Future result representing the bitmap image. blobCache
            Observable is guaranteed to be returned on the UI thread.</returns>
        </member>
        <member name="M:Akavache.BitmapImageMixin.LoadImageFromUrl(Akavache.IBlobCache,System.String,System.Uri,System.Boolean,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.DateTimeOffset})">
            <summary>
            A combination of DownloadUrl and LoadImage, this method fetches an
            image from a remote URL (using the cached value if possible) and
            returns the image.
            </summary>
            <param name="blobCache">The blob cache to load the image from if available.</param>
            <param name="key">The key to store with.</param>
            <param name="url">The URL to download.</param>
            <param name="fetchAlways">If we should always fetch the image from the URL even if we have one in the blob.</param>
            <param name="desiredWidth">Optional desired width, if not specified will be the default size.</param>
            <param name="desiredHeight">Optional desired height, if not specified will be the default size.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A Future result representing the bitmap image. blobCache
            Observable is guaranteed to be returned on the UI thread.</returns>
        </member>
        <member name="M:Akavache.BitmapImageMixin.ThrowOnBadImageBuffer(System.Byte[])">
            <summary>
            Converts bad image buffers into an exception.
            </summary>
            <param name="compressedImage">The compressed image buffer to check.</param>
            <returns>The byte[], or OnError if the buffer is corrupt (empty or
            too small).</returns>
        </member>
        <member name="T:Akavache.BlobCache">
            <summary>
            A class which represents a blobbed cache.
            </summary>
        </member>
        <member name="P:Akavache.BlobCache.ApplicationName">
            <summary>
            Gets or sets your application's name. Set this at startup, this defines where
            your data will be stored (usually at %AppData%\[ApplicationName]).
            </summary>
        </member>
        <member name="P:Akavache.BlobCache.LocalMachine">
            <summary>
            Gets or sets the local machine cache. Store data here that is unrelated to the
            user account or shouldn't be uploaded to other machines (i.e.
            image cache data).
            </summary>
        </member>
        <member name="P:Akavache.BlobCache.UserAccount">
            <summary>
            Gets or sets the user account cache. Store data here that is associated with
            the user; in large organizations, this data will be synced to all
            machines via NT Roaming Profiles.
            </summary>
        </member>
        <member name="P:Akavache.BlobCache.Secure">
            <summary>
            Gets or sets an IBlobCache that is encrypted - store sensitive data in this
            cache such as login information.
            </summary>
        </member>
        <member name="P:Akavache.BlobCache.InMemory">
            <summary>
            Gets or sets an IBlobCache that simply stores data in memory. Data stored in
            this cache will be lost when the application restarts.
            </summary>
        </member>
        <member name="P:Akavache.BlobCache.ForcedDateTimeKind">
            <summary>
            Gets or sets the DateTimeKind handling for BSON readers to be forced.
            </summary>
            <remarks>
            <para>
            By default, <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> uses a <see cref="T:System.DateTimeKind"/> of <see cref="F:System.DateTimeKind.Local"/> and <see cref="T:Newtonsoft.Json.Bson.BsonWriter"/>
            uses <see cref="F:System.DateTimeKind.Utc"/>. Thus, DateTimes are serialized as UTC but deserialized as local time. To force BSON readers to
            use some other <c>DateTimeKind</c>, you can set this value.
            </para>
            </remarks>
        </member>
        <member name="P:Akavache.BlobCache.TaskpoolScheduler">
            <summary>
            Gets or sets the Scheduler used for task pools.
            </summary>
        </member>
        <member name="M:Akavache.BlobCache.EnsureInitialized">
            <summary>
            Makes sure that the system has been initialized.
            </summary>
        </member>
        <member name="M:Akavache.BlobCache.Shutdown">
            <summary>
            This method shuts down all of the blob caches. Make sure call it
            on app exit and await / Wait() on it.
            </summary>
            <returns>A Task representing when all caches have finished shutting
            down.</returns>
        </member>
        <member name="P:Akavache.BlobCache.ShutdownBlobCache.ForcedDateTimeKind">
            <inheritdoc />
        </member>
        <member name="T:Akavache.CacheEntry">
            <summary>
            A entry in a memory cache.
            </summary>
        </member>
        <member name="M:Akavache.CacheEntry.#ctor(System.String,System.Byte[],System.DateTimeOffset,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.CacheEntry"/> class.
            </summary>
            <param name="typeName">The name of the type being stored.</param>
            <param name="value">The value being stored.</param>
            <param name="createdAt">The date and time the entry was created.</param>
            <param name="expiresAt">The date and time when the entry expires.</param>
        </member>
        <member name="P:Akavache.CacheEntry.CreatedAt">
            <summary>
            Gets or sets the date and time when the entry was created.
            </summary>
        </member>
        <member name="P:Akavache.CacheEntry.ExpiresAt">
            <summary>
            Gets or sets the date and time when the entry will expire.
            </summary>
        </member>
        <member name="P:Akavache.CacheEntry.TypeName">
            <summary>
            Gets or sets the type name of the entry.
            </summary>
        </member>
        <member name="P:Akavache.CacheEntry.Value">
            <summary>
            Gets or sets the value of the entry.
            </summary>
        </member>
        <member name="T:Akavache.IBlobCache">
            <summary>
            IBlobCache is the core interface on which Akavache is built, it is an
            interface describing an asynchronous persistent key-value store.
            </summary>
        </member>
        <member name="P:Akavache.IBlobCache.Shutdown">
            <summary>
            Gets an Observable that fires after the Dispose completes successfully,
            since there is no such thing as an AsyncDispose().
            </summary>
        </member>
        <member name="P:Akavache.IBlobCache.Scheduler">
            <summary>
            Gets the IScheduler used to defer operations. By default, this is
            BlobCache.TaskpoolScheduler.
            </summary>
        </member>
        <member name="P:Akavache.IBlobCache.ForcedDateTimeKind">
            <summary>
            Gets or sets the DateTimeKind handling for BSON readers to be forced.
            </summary>
            <remarks>
            <para>
            By default, <see cref="T:Newtonsoft.Json.Bson.BsonReader"/> uses a <see cref="T:System.DateTimeKind"/> of <see cref="F:System.DateTimeKind.Local"/> and <see cref="T:Newtonsoft.Json.Bson.BsonWriter"/>
            uses <see cref="F:System.DateTimeKind.Utc"/>. Thus, DateTimes are serialized as UTC but deserialized as local time. To force BSON readers to
            use some other <c>DateTimeKind</c>, you can set this value.
            </para>
            </remarks>
        </member>
        <member name="M:Akavache.IBlobCache.Insert(System.String,System.Byte[],System.Nullable{System.DateTimeOffset})">
            <summary>
            Insert a blob into the cache with the specified key and expiration
            date.
            </summary>
            <param name="key">The key to use for the data.</param>
            <param name="data">The data to save in the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.
            After the specified date, the key-value pair should be removed.</param>
            <returns>A signal to indicate when the key has been inserted.</returns>
        </member>
        <member name="M:Akavache.IBlobCache.Get(System.String)">
            <summary>
            Retrieve a value from the key-value cache. If the key is not in
            the cache, this method should return an IObservable which
            OnError's with KeyNotFoundException.
            </summary>
            <param name="key">The key to return asynchronously.</param>
            <returns>A Future result representing the byte data.</returns>
        </member>
        <member name="M:Akavache.IBlobCache.GetAllKeys">
            <summary>
            Return all keys in the cache. Note that this method is normally
            for diagnostic / testing purposes, and that it is not guaranteed
            to be accurate with respect to in-flight requests.
            </summary>
            <returns>A list of valid keys for the cache.</returns>
        </member>
        <member name="M:Akavache.IBlobCache.GetCreatedAt(System.String)">
            <summary>
            Returns the time that the key was added to the cache, or returns
            null if the key isn't in the cache.
            </summary>
            <param name="key">The key to return the date for.</param>
            <returns>The date the key was created on.</returns>
        </member>
        <member name="M:Akavache.IBlobCache.Flush">
            <summary>
            This method guarantees that all in-flight inserts have completed
            and any indexes have been written to disk.
            </summary>
            <returns>A signal indicating when the flush is complete.</returns>
        </member>
        <member name="M:Akavache.IBlobCache.Invalidate(System.String)">
            <summary>
            Remove a key from the cache. If the key doesn't exist, this method
            should do nothing and return (*not* throw KeyNotFoundException).
            </summary>
            <param name="key">The key to remove from the cache.</param>
            <returns>A signal indicating when the invalidate is complete.</returns>
        </member>
        <member name="M:Akavache.IBlobCache.InvalidateAll">
            <summary>
            Invalidate all entries in the cache (i.e. clear it). Note that
            this method is blocking and incurs a significant performance
            penalty if used while the cache is being used on other threads.
            </summary>
            <returns>A signal indicating when the invalidate is complete.</returns>
        </member>
        <member name="M:Akavache.IBlobCache.Vacuum">
            <summary>
            This method eagerly removes all expired keys from the blob cache, as
            well as does any cleanup operations that makes sense (Hint: on SQLite3
            it does a Vacuum).
            </summary>
            <returns>A signal indicating when the operation is complete.</returns>
        </member>
        <member name="T:Akavache.IBulkBlobCache">
            <summary>
            A interface that handles bulk add/remove/invalidate functionality over many key/value pairs.
            </summary>
        </member>
        <member name="M:Akavache.IBulkBlobCache.Insert(System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.Nullable{System.DateTimeOffset})">
            <summary>
            Inserts several keys into the database at one time. If any individual
            insert fails, this operation should cancel the entire insert (i.e. it
            should *not* partially succeed).
            </summary>
            <param name="keyValuePairs">The keys and values to insert.</param>
            <param name="absoluteExpiration">An optional expiration date.
            After the specified date, the key-value pair should be removed.</param>
            <returns>A signal to indicate when the key has been inserted.</returns>
        </member>
        <member name="M:Akavache.IBulkBlobCache.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieve several values from the key-value cache. If any of
            the keys are not in the cache, this method should return an
            IObservable which OnError's with KeyNotFoundException.
            </summary>
            <param name="keys">The keys to return asynchronously.</param>
            <returns>A Future result representing the byte data for each key.</returns>
        </member>
        <member name="M:Akavache.IBulkBlobCache.GetCreatedAt(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the time that the keys were added to the cache, or returns
            null if the key isn't in the cache.
            </summary>
            <param name="keys">The keys to return the date for.</param>
            <returns>The date the key was created on.</returns>
        </member>
        <member name="M:Akavache.IBulkBlobCache.Invalidate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove several keys from the cache. If the key doesn't exist, this method
            should do nothing and return (*not* throw KeyNotFoundException).
            </summary>
            <param name="keys">The key to remove from the cache.</param>
            <returns>A observable that signals when the operational is completed.</returns>
        </member>
        <member name="T:Akavache.InMemoryBlobCache">
            <summary>
            This class is an IBlobCache backed by a simple in-memory Dictionary.
            Use it for testing / mocking purposes.
            </summary>
        </member>
        <member name="M:Akavache.InMemoryBlobCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.InMemoryBlobCache"/> class.
            </summary>
        </member>
        <member name="M:Akavache.InMemoryBlobCache.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.InMemoryBlobCache"/> class.
            </summary>
            <param name="scheduler">The scheduler to use for Observable based operations.</param>
        </member>
        <member name="M:Akavache.InMemoryBlobCache.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}})">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.InMemoryBlobCache"/> class.
            </summary>
            <param name="initialContents">The initial contents of the cache.</param>
        </member>
        <member name="M:Akavache.InMemoryBlobCache.#ctor(System.Reactive.Concurrency.IScheduler,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}})">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.InMemoryBlobCache"/> class.
            </summary>
            <param name="scheduler">The scheduler to use for Observable based operations.</param>
            <param name="initialContents">The initial contents of the cache.</param>
        </member>
        <member name="M:Akavache.InMemoryBlobCache.#ctor(System.Action,System.Reactive.Concurrency.IScheduler,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}})">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.InMemoryBlobCache"/> class.
            </summary>
            <param name="disposer">A action that is called to dispose contents.</param>
            <param name="scheduler">The scheduler to use for Observable based operations.</param>
            <param name="initialContents">The initial contents of the cache.</param>
        </member>
        <member name="P:Akavache.InMemoryBlobCache.ForcedDateTimeKind">
            <inheritdoc />
        </member>
        <member name="P:Akavache.InMemoryBlobCache.Scheduler">
            <inheritdoc />
        </member>
        <member name="P:Akavache.InMemoryBlobCache.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.OverrideGlobals(System.Reactive.Concurrency.IScheduler,System.Collections.Generic.KeyValuePair{System.String,System.Byte[]}[])">
            <summary>
            Overrides the global registrations with specified values.
            </summary>
            <param name="scheduler">The default scheduler to use.</param>
            <param name="initialContents">The default inner contents to use.</param>
            <returns>A generated cache.</returns>
        </member>
        <member name="M:Akavache.InMemoryBlobCache.OverrideGlobals(System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Overrides the global registrations with specified values.
            </summary>
            <param name="initialContents">The default inner contents to use.</param>
            <param name="scheduler">The default scheduler to use.</param>
            <returns>A generated cache.</returns>
        </member>
        <member name="M:Akavache.InMemoryBlobCache.OverrideGlobals(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Overrides the global registrations with specified values.
            </summary>
            <param name="initialContents">The default inner contents to use.</param>
            <param name="scheduler">The default scheduler to use.</param>
            <returns>A generated cache.</returns>
        </member>
        <member name="M:Akavache.InMemoryBlobCache.Insert(System.String,System.Byte[],System.Nullable{System.DateTimeOffset})">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.Flush">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.GetCreatedAt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.GetAllKeys">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.Invalidate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.InvalidateAll">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.InsertObject``1(System.String,``0,System.Nullable{System.DateTimeOffset})">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.GetObject``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.GetObjectCreatedAt``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.GetAllObjects``1">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.InvalidateObject``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.InvalidateAllObjects``1">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.Vacuum">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Akavache.InMemoryBlobCache.Dispose(System.Boolean)">
            <summary>
            Disposes of the managed memory inside the class.
            </summary>
            <param name="isDisposing">If this is being called by the Dispose method.</param>
        </member>
        <member name="T:Akavache.IObjectBlobCache">
            <summary>
            A BlobCache implementation that can handle objects.
            </summary>
        </member>
        <member name="M:Akavache.IObjectBlobCache.InsertObject``1(System.String,``0,System.Nullable{System.DateTimeOffset})">
            <summary>
            Insert an object into the cache, via the JSON serializer.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <param name="key">The key to associate with the object.</param>
            <param name="value">The object to serialize.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A Future result representing the completion of the insert.</returns>
        </member>
        <member name="M:Akavache.IObjectBlobCache.GetObject``1(System.String)">
            <summary>
            Get an object from the cache and deserialize it via the JSON
            serializer.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <param name="key">The key to look up in the cache.</param>
            <returns>A Future result representing the object in the cache.</returns>
        </member>
        <member name="M:Akavache.IObjectBlobCache.GetAllObjects``1">
            <summary>
            Return all objects of a specific Type in the cache.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <returns>A Future result representing all objects in the cache
            with the specified Type.</returns>
        </member>
        <member name="M:Akavache.IObjectBlobCache.GetObjectCreatedAt``1(System.String)">
            <summary>
            Returns the time that the object with the key was added to the cache, or returns
            null if the key isn't in the cache.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <param name="key">The key to return the date for.</param>
            <returns>The date the key was created on.</returns>
        </member>
        <member name="M:Akavache.IObjectBlobCache.InvalidateObject``1(System.String)">
            <summary>
            Invalidates a single object from the cache. It is important that the Type
            Parameter for this method be correct, and you cannot use
            IBlobCache.Invalidate to perform the same task.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <param name="key">The key to invalidate.</param>
            <returns>A Future result representing the completion of the invalidation.</returns>
        </member>
        <member name="M:Akavache.IObjectBlobCache.InvalidateAllObjects``1">
            <summary>
            Invalidates all objects of the specified type. To invalidate all
            objects regardless of type, use InvalidateAll.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <returns>
            A Future result representing the completion of the invalidation.</returns>
        </member>
        <member name="T:Akavache.IObjectBulkBlobCache">
            <summary>
            A BlobCache implementation that can handle bulk operations with objects.
            </summary>
        </member>
        <member name="M:Akavache.IObjectBulkBlobCache.InsertObjects``1(System.Collections.Generic.IDictionary{System.String,``0},System.Nullable{System.DateTimeOffset})">
            <summary>
            Insert several objects into the cache, via the JSON serializer.
            Similarly to InsertAll, partial inserts should not happen.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <param name="keyValuePairs">The data to insert into the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A Future result representing the completion of the insert.</returns>
        </member>
        <member name="M:Akavache.IObjectBulkBlobCache.GetObjects``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get several objects from the cache and deserialize it via the JSON
            serializer.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <param name="keys">The key to look up in the cache.</param>
            <returns>A Future result representing the object in the cache.</returns>
        </member>
        <member name="M:Akavache.IObjectBulkBlobCache.InvalidateObjects``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Invalidates several objects from the cache. It is important that the Type
            Parameter for this method be correct, and you cannot use
            IBlobCache.Invalidate to perform the same task.
            </summary>
            <typeparam name="T">The type of object associated with the blob.</typeparam>
            <param name="keys">The key to invalidate.</param>
            <returns>A Future result representing the completion of the invalidation.</returns>
        </member>
        <member name="T:Akavache.IObjectWrapper">
            <summary>
            A wrapper around a object.
            </summary>
        </member>
        <member name="T:Akavache.ISecureBlobCache">
             <summary>
             This interface indicates that the underlying BlobCache implementation
             encrypts or otherwise secures its persisted content.
            
             By implementing this interface, you must guarantee that the data
             saved to disk cannot be easily read by a third party.
             </summary>
        </member>
        <member name="T:Akavache.BulkOperationsMixin">
            <summary>
            Extension methods for the <see cref="T:Akavache.IBlobCache"/> that provide bulk operations.
            </summary>
        </member>
        <member name="M:Akavache.BulkOperationsMixin.Get(Akavache.IBlobCache,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a dictionary filled with the specified keys with their corresponding values.
            </summary>
            <param name="blobCache">The blob cache to extract the values from.</param>
            <param name="keys">The keys to get the values for.</param>
            <returns>A observable with the specified values.</returns>
        </member>
        <member name="M:Akavache.BulkOperationsMixin.Insert(Akavache.IBlobCache,System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.Nullable{System.DateTimeOffset})">
            <summary>
            Inserts the specified key/value pairs into the blob.
            </summary>
            <param name="blobCache">The blob cache to insert the values to.</param>
            <param name="keyValuePairs">The key/value to insert.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A observable which signals when complete.</returns>
        </member>
        <member name="M:Akavache.BulkOperationsMixin.GetCreatedAt(Akavache.IBlobCache,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a dictionary filled with the specified keys with their corresponding created <see cref="T:System.DateTimeOffset"/>
            if it's available.
            </summary>
            <param name="blobCache">The blob cache to extract the values from.</param>
            <param name="keys">The keys to get the values for.</param>
            <returns>A observable with the specified values.</returns>
        </member>
        <member name="M:Akavache.BulkOperationsMixin.Invalidate(Akavache.IBlobCache,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Invalidates all the entries at the specified keys, causing them in future to have to be re-fetched.
            </summary>
            <param name="blobCache">The blob cache to invalidate values from.</param>
            <param name="keys">The keys to invalid.</param>
            <returns>A observable which signals when complete.</returns>
        </member>
        <member name="M:Akavache.BulkOperationsMixin.GetObjects``1(Akavache.IBlobCache,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a dictionary filled with the specified keys with their corresponding values.
            </summary>
            <typeparam name="T">The type of item to get.</typeparam>
            <param name="blobCache">The blob cache to extract the values from.</param>
            <param name="keys">The keys to get the values for.</param>
            <returns>A observable with the specified values.</returns>
        </member>
        <member name="M:Akavache.BulkOperationsMixin.InsertObjects``1(Akavache.IBlobCache,System.Collections.Generic.IDictionary{System.String,``0},System.Nullable{System.DateTimeOffset})">
            <summary>
            Inserts the specified key/value pairs into the blob.
            </summary>
            <typeparam name="T">The type of item to insert.</typeparam>
            <param name="blobCache">The blob cache to insert the values to.</param>
            <param name="keyValuePairs">The key/value to insert.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A observable which signals when complete.</returns>
        </member>
        <member name="M:Akavache.BulkOperationsMixin.InvalidateObjects``1(Akavache.IBlobCache,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Invalidates all the entries at the specified keys, causing them in future to have to be re-fetched.
            </summary>
            <typeparam name="T">The type of item to invalidate.</typeparam>
            <param name="blobCache">The blob cache to invalidate values from.</param>
            <param name="keys">The keys to invalid.</param>
            <returns>A observable which signals when complete.</returns>
        </member>
        <member name="T:Akavache.DataProtectionScope">
            <summary>
            The scope in which to store data stored by <see cref="T:Akavache.ProtectedData" />.
            </summary>
        </member>
        <member name="F:Akavache.DataProtectionScope.CurrentUser">
            <summary>
            Store the data underneath the current user.
            </summary>
        </member>
        <member name="T:Akavache.DependencyResolverMixin">
            <summary>
            A set of mix-in associated with the <see cref="T:Splat.IDependencyResolver"/> interface.
            </summary>
        </member>
        <member name="M:Akavache.DependencyResolverMixin.InitializeAkavache(Splat.IMutableDependencyResolver,Splat.IReadonlyDependencyResolver)">
            <summary>
            Initializes a ReactiveUI dependency resolver with classes that
            Akavache uses internally.
            </summary>
            <param name="resolver">The resolver to register Akavache based dependencies against.</param>
            <param name="readonlyDependencyResolver">The readonly dependency resolver.</param>
        </member>
        <member name="T:Akavache.HttpMixinExtensions">
            <summary>
            Set of extension methods that provide Http functionality to the <see cref="T:Akavache.IBlobCache"/> interface.
            </summary>
        </member>
        <member name="M:Akavache.HttpMixinExtensions.DownloadUrl(Akavache.IBlobCache,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Download data from an HTTP URL and insert the result into the
            cache. If the data is already in the cache, this returns
            a cached value. The URL itself is used as the key.
            </summary>
            <param name="blobCache">The blob cache to perform the operation on.</param>
            <param name="url">The URL to download.</param>
            <param name="headers">An optional Dictionary containing the HTTP
            request headers.</param>
            <param name="fetchAlways">Force a web request to always be issued, skipping the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>The data downloaded from the URL.</returns>
        </member>
        <member name="M:Akavache.HttpMixinExtensions.DownloadUrl(Akavache.IBlobCache,System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Download data from an HTTP URL and insert the result into the
            cache. If the data is already in the cache, this returns
            a cached value. The URL itself is used as the key.
            </summary>
            <param name="blobCache">The blob cache to perform the operation on.</param>
            <param name="url">The URL to download.</param>
            <param name="headers">An optional Dictionary containing the HTTP
            request headers.</param>
            <param name="fetchAlways">Force a web request to always be issued, skipping the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>The data downloaded from the URL.</returns>
        </member>
        <member name="M:Akavache.HttpMixinExtensions.DownloadUrl(Akavache.IBlobCache,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Download data from an HTTP URL and insert the result into the
            cache. If the data is already in the cache, this returns
            a cached value. An explicit key is provided rather than the URL itself.
            </summary>
            <param name="blobCache">The blob cache to perform the operation on.</param>
            <param name="key">The key to store with.</param>
            <param name="url">The URL to download.</param>
            <param name="headers">An optional Dictionary containing the HTTP
            request headers.</param>
            <param name="fetchAlways">Force a web request to always be issued, skipping the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>The data downloaded from the URL.</returns>
        </member>
        <member name="M:Akavache.HttpMixinExtensions.DownloadUrl(Akavache.IBlobCache,System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Download data from an HTTP URL and insert the result into the
            cache. If the data is already in the cache, this returns
            a cached value. An explicit key is provided rather than the URL itself.
            </summary>
            <param name="blobCache">The blob cache to perform the operation on.</param>
            <param name="key">The key to store with.</param>
            <param name="url">The URL to download.</param>
            <param name="headers">An optional Dictionary containing the HTTP
            request headers.</param>
            <param name="fetchAlways">Force a web request to always be issued, skipping the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>The data downloaded from the URL.</returns>
        </member>
        <member name="T:Akavache.IAkavacheHttpMixin">
            <summary>
            A interface that represents a mixin for providing HTTP functionality.
            </summary>
        </member>
        <member name="M:Akavache.IAkavacheHttpMixin.DownloadUrl(Akavache.IBlobCache,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets a observable for a download.
            </summary>
            <param name="blobCache">The blob cache where to get the value from if available.</param>
            <param name="url">The url where to get the resource if not available in the cache.</param>
            <param name="headers">The headers to use in the HTTP action.</param>
            <param name="fetchAlways">If we should just fetch and not bother checking the cache first.</param>
            <param name="absoluteExpiration">A optional expiration date time.</param>
            <returns>A observable that signals when there is byte data.</returns>
        </member>
        <member name="M:Akavache.IAkavacheHttpMixin.DownloadUrl(Akavache.IBlobCache,System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets a observable for a download.
            </summary>
            <param name="blobCache">The blob cache where to get the value from if available.</param>
            <param name="url">The url where to get the resource if not available in the cache.</param>
            <param name="headers">The headers to use in the HTTP action.</param>
            <param name="fetchAlways">If we should just fetch and not bother checking the cache first.</param>
            <param name="absoluteExpiration">A optional expiration date time.</param>
            <returns>A observable that signals when there is byte data.</returns>
        </member>
        <member name="M:Akavache.IAkavacheHttpMixin.DownloadUrl(Akavache.IBlobCache,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets a observable for a download.
            </summary>
            <param name="blobCache">The blob cache where to get the value from if available.</param>
            <param name="key">The key to use for the download cache entry.</param>
            <param name="url">The url where to get the resource if not available in the cache.</param>
            <param name="headers">The headers to use in the HTTP action.</param>
            <param name="fetchAlways">If we should just fetch and not bother checking the cache first.</param>
            <param name="absoluteExpiration">A optional expiration date time.</param>
            <returns>A observable that signals when there is byte data.</returns>
        </member>
        <member name="M:Akavache.IAkavacheHttpMixin.DownloadUrl(Akavache.IBlobCache,System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets a observable for a download.
            </summary>
            <param name="blobCache">The blob cache where to get the value from if available.</param>
            <param name="key">The key to use for the download cache entry.</param>
            <param name="url">The url where to get the resource if not available in the cache.</param>
            <param name="headers">The headers to use in the HTTP action.</param>
            <param name="fetchAlways">If we should just fetch and not bother checking the cache first.</param>
            <param name="absoluteExpiration">A optional expiration date time.</param>
            <returns>A observable that signals when there is byte data.</returns>
        </member>
        <member name="T:Akavache.IWantsToRegisterStuff">
            <summary>
            This class is derived for different assemblies to provide registrations in Splat.
            </summary>
        </member>
        <member name="M:Akavache.IWantsToRegisterStuff.Register(Splat.IMutableDependencyResolver,Splat.IReadonlyDependencyResolver)">
            <summary>
            Register required items in the provided dependency resolver.
            </summary>
            <param name="resolver">The resolver.</param>
            <param name="readonlyDependencyResolver">The readonly dependency resolver.</param>
        </member>
        <member name="T:Akavache.JsonDateTimeContractResolver">
            <summary>
            Resolver which will handle DateTime and DateTimeOffset with our own internal resolver.
            It will also be able to use, if set, a external provider that a user has set.
            </summary>
        </member>
        <member name="M:Akavache.JsonDateTimeContractResolver.#ctor(Newtonsoft.Json.Serialization.IContractResolver,System.Nullable{System.DateTimeKind})">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.JsonDateTimeContractResolver"/> class.
            </summary>
            <param name="contractResolver">A inherited contract resolver.</param>
            <param name="forceDateTimeKindOverride">If we should override the <see cref="T:System.DateTimeKind"/>.</param>
        </member>
        <member name="M:Akavache.JsonDateTimeContractResolver.ResolveContract(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Akavache.JsonDateTimeTickConverter">
            <summary>
            Since we use BSON at places, we want to just store ticks to avoid loosing precision.
            By default BSON will use JSON ticks.
            </summary>
        </member>
        <member name="P:Akavache.JsonDateTimeTickConverter.Default">
            <summary>
            Gets a instance of the DateTimeConverter that handles the DateTime in UTC mode.
            </summary>
        </member>
        <member name="P:Akavache.JsonDateTimeTickConverter.LocalDateTimeKindDefault">
            <summary>
            Gets a instance of the DateTimeConverter that handles the DateTime in Local mode.
            </summary>
        </member>
        <member name="T:Akavache.JsonSerializationMixin">
            <summary>
            Set of extension methods associated with JSON serialization.
            </summary>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.InsertObject``1(Akavache.IBlobCache,System.String,``0,System.Nullable{System.DateTimeOffset})">
            <summary>
            Insert an object into the cache, via the JSON serializer.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="blobCache">The cache to insert the item.</param>
            <param name="key">The key to associate with the object.</param>
            <param name="value">The object to serialize.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>An observable which signals when the insertion has completed.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.InsertAllObjects``1(Akavache.IBlobCache,System.Collections.Generic.IDictionary{System.String,``0},System.Nullable{System.DateTimeOffset})">
            <summary>
            Insert several objects into the cache, via the JSON serializer.
            Similarly to InsertAll, partial inserts should not happen.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="blobCache">The cache to insert the items.</param>
            <param name="keyValuePairs">The data to insert into the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A Future result representing the completion of the insert.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.GetObject``1(Akavache.IBlobCache,System.String)">
            <summary>
            Get an object from the cache and deserialize it via the JSON
            serializer.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="blobCache">The cache to get the item.</param>
            <param name="key">The key to look up in the cache
            modified key name. If this is true, GetAllObjects will not find this object.</param>
            <returns>A Future result representing the object in the cache.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.GetAllObjects``1(Akavache.IBlobCache)">
            <summary>
            Return all objects of a specific Type in the cache.
            </summary>
            <param name="blobCache">The cache to get the items.</param>
            <typeparam name="T">The type of item to get.</typeparam>
            <returns>A Future result representing all objects in the cache
            with the specified Type.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.GetOrFetchObject``1(Akavache.IBlobCache,System.String,System.Func{System.IObservable{``0}},System.Nullable{System.DateTimeOffset})">
             <summary>
             Attempt to return an object from the cache. If the item doesn't
             exist or returns an error, call a Func to return the latest
             version of an object and insert the result in the cache.
            
             For most Internet applications, this method is the best method to
             call to fetch static data (i.e. images) from the network.
             </summary>
             <param name="blobCache">The cache to get the item.</param>
             <param name="key">The key to associate with the object.</param>
             <param name="fetchFunc">A Func which will asynchronously return
             the latest value for the object should the cache not contain the
             key.
            
             Observable.Start is the most straightforward way (though not the
             most efficient!) to implement this Func.</param>
             <param name="absoluteExpiration">An optional expiration date.</param>
             <typeparam name="T">The type of item to get.</typeparam>
             <returns>A Future result representing the deserialized object from
             the cache.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.GetOrFetchObject``1(Akavache.IBlobCache,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.DateTimeOffset})">
             <summary>
             Attempt to return an object from the cache. If the item doesn't
             exist or returns an error, call a Func to return the latest
             version of an object and insert the result in the cache.
            
             For most Internet applications, this method is the best method to
             call to fetch static data (i.e. images) from the network.
             </summary>
             <typeparam name="T">The type of item to get.</typeparam>
             <param name="blobCache">The cache to get the item.</param>
             <param name="key">The key to associate with the object.</param>
             <param name="fetchFunc">A Func which will asynchronously return
             the latest value for the object should the cache not contain the
             key. </param>
             <param name="absoluteExpiration">An optional expiration date.</param>
             <returns>A Future result representing the deserialized object from
             the cache.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.GetOrCreateObject``1(Akavache.IBlobCache,System.String,System.Func{``0},System.Nullable{System.DateTimeOffset})">
             <summary>
             Attempt to return an object from the cache. If the item doesn't
             exist or returns an error, call a Func to create a new one.
            
             For most Internet applications, this method is the best method to
             call to fetch static data (i.e. images) from the network.
             </summary>
             <typeparam name="T">The type of item to get.</typeparam>
             <param name="blobCache">The cache to get the item.</param>
             <param name="key">The key to associate with the object.</param>
             <param name="fetchFunc">A Func which will return
             the latest value for the object should the cache not contain the
             key. </param>
             <param name="absoluteExpiration">An optional expiration date.</param>
             <returns>A Future result representing the deserialized object from
             the cache.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.GetObjectCreatedAt``1(Akavache.IBlobCache,System.String)">
            <summary>
            Returns the time that the key was added to the cache, or returns
            null if the key isn't in the cache.
            </summary>
            <typeparam name="T">The type of item to get.</typeparam>
            <param name="blobCache">The cache to get the item.</param>
            <param name="key">The key to return the date for.</param>
            <returns>The date the key was created on.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.GetAndFetchLatest``1(Akavache.IBlobCache,System.String,System.Func{System.IObservable{``0}},System.Func{System.DateTimeOffset,System.Boolean},System.Nullable{System.DateTimeOffset},System.Boolean,System.Func{``0,System.Boolean})">
             <summary>
             This method attempts to returned a cached value, while
             simultaneously calling a Func to return the latest value. When the
             latest data comes back, it replaces what was previously in the
             cache.
            
             This method is best suited for loading dynamic data from the
             Internet, while still showing the user earlier data.
            
             This method returns an IObservable that may return *two* results
             (first the cached data, then the latest data). Therefore, it's
             important for UI applications that in your Subscribe method, you
             write the code to merge the second result when it comes in.
            
             This also means that await'ing this method is a Bad Idea(tm), always
             use Subscribe.
             </summary>
             <typeparam name="T">The type of item to get.</typeparam>
             <param name="blobCache">The cache to get the item.</param>
             <param name="key">The key to store the returned result under.</param>
             <param name="fetchFunc">A method to fetch a observable.</param>
             <param name="fetchPredicate">An optional Func to determine whether
             the updated item should be fetched. If the cached version isn't found,
             this parameter is ignored and the item is always fetched.</param>
             <param name="absoluteExpiration">An optional expiration date.</param>
             <param name="shouldInvalidateOnError">If this is true, the cache will
             be cleared when an exception occurs in fetchFunc.</param>
             <param name="cacheValidationPredicate">An optional Func to determine
             if the fetched value should be cached.</param>
             <returns>An Observable stream containing either one or two
             results (possibly a cached version, then the latest version).</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.GetAndFetchLatest``1(Akavache.IBlobCache,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.DateTimeOffset,System.Boolean},System.Nullable{System.DateTimeOffset},System.Boolean,System.Func{``0,System.Boolean})">
             <summary>
             This method attempts to returned a cached value, while
             simultaneously calling a Func to return the latest value. When the
             latest data comes back, it replaces what was previously in the
             cache.
            
             This method is best suited for loading dynamic data from the
             Internet, while still showing the user earlier data.
            
             This method returns an IObservable that may return *two* results
             (first the cached data, then the latest data). Therefore, it's
             important for UI applications that in your Subscribe method, you
             write the code to merge the second result when it comes in.
            
             This also means that awaiting this method is a Bad Idea(tm), always
             use Subscribe.
             </summary>
             <typeparam name="T">The type of item to get.</typeparam>
             <param name="blobCache">The cache to get the item.</param>
             <param name="key">The key to store the returned result under.</param>
             <param name="fetchFunc">A method that will fetch the task.</param>
             <param name="fetchPredicate">An optional Func to determine whether
             the updated item should be fetched. If the cached version isn't found,
             this parameter is ignored and the item is always fetched.</param>
             <param name="absoluteExpiration">An optional expiration date.</param>
             <param name="shouldInvalidateOnError">If this is true, the cache will
             be cleared when an exception occurs in fetchFunc.</param>
             <param name="cacheValidationPredicate">An optional Func to determine
             if the fetched value should be cached.</param>
             <returns>An Observable stream containing either one or two
             results (possibly a cached version, then the latest version).</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.InvalidateObject``1(Akavache.IBlobCache,System.String)">
            <summary>
            Invalidates a single object from the cache. It is important that the Type
            Parameter for this method be correct, and you cannot use
            IBlobCache.Invalidate to perform the same task.
            </summary>
            <typeparam name="T">The type of item to invalidate.</typeparam>
            <param name="blobCache">The cache to invalidate.</param>
            <param name="key">The key to invalidate.</param>
            <returns>An observable that signals when the operation has completed.</returns>
        </member>
        <member name="M:Akavache.JsonSerializationMixin.InvalidateAllObjects``1(Akavache.IBlobCache)">
            <summary>
            Invalidates all objects of the specified type. To invalidate all
            objects regardless of type, use InvalidateAll.
            </summary>
            <typeparam name="T">The type of item to invalidate.</typeparam>
            <param name="blobCache">The cache to invalidate.</param>
            <returns>An observable that signals when the operation has finished.</returns>
            <remarks>Returns a Unit for each invalidation completion. Use Wait instead of First to wait for
            this.</remarks>
        </member>
        <member name="T:Akavache.IKeyedOperationQueue">
            <summary>
            A queue that uses keys to determine the queue operations.
            </summary>
        </member>
        <member name="M:Akavache.IKeyedOperationQueue.EnqueueObservableOperation``1(System.String,System.Func{System.IObservable{``0}})">
            <summary>
              Queue an operation to run in the background that returns a stream of values. All operations with the
              same key will run in sequence, waiting for the previous operation to complete.
              If you want to queue an operation that already returns IObservable, this is your guy.
            </summary>
            <param name="key">The key to use.</param>
            <param name="asyncCalculationFunc">A method to run in the background that returns a stream of values.</param>
            <typeparam name="T">The type of item to queue.</typeparam>
            <returns>A future stream of values.</returns>
        </member>
        <member name="M:Akavache.IKeyedOperationQueue.EnqueueOperation``1(System.String,System.Func{``0})">
            <summary>
              Queue an operation to run in the background that returns a value. All operations with the same key will
              run in sequence, waiting for the previous operation to complete.
            </summary>
            <param name="key">The key to use.</param>
            <param name="calculationFunc">A method to run in the background that returns a single value.</param>
            <typeparam name="T">The type of item to queue.</typeparam>
            <returns>A future value.</returns>
        </member>
        <member name="M:Akavache.IKeyedOperationQueue.EnqueueOperation(System.String,System.Action)">
            <summary>
              Queue an operation to run in the background. All operations with the same key will run in sequence,
              waiting for the previous operation to complete.
            </summary>
            <param name="key">The key to use.</param>
            <param name="action">A method to run in the background.</param>
            <returns>A future representing when the operation completes.</returns>
        </member>
        <member name="M:Akavache.IKeyedOperationQueue.ShutdownQueue">
            <summary>
              Flushes the remaining operations and returns a signal when they are all complete.
            </summary>
            <returns>An observable that signals when the queue has shutdown.</returns>
        </member>
        <member name="P:Akavache.KeyedOperation.Key">
            <summary>
            Gets or sets the key for the entry.
            </summary>
        </member>
        <member name="P:Akavache.KeyedOperation.Id">
            <summary>
            Gets or sets the id for the entry.
            </summary>
        </member>
        <member name="M:Akavache.KeyedOperation.EvaluateFunc">
            <summary>
            Gets a observable which will be triggered.
            </summary>
            <returns>The observable.</returns>
        </member>
        <member name="P:Akavache.KeyedOperation`1.Func">
            <summary>
            Gets or sets the function which returns the observable.
            </summary>
        </member>
        <member name="P:Akavache.KeyedOperation`1.Result">
            <summary>
            Gets the result subject.
            </summary>
        </member>
        <member name="M:Akavache.KeyedOperation`1.EvaluateFunc">
            <inheritdoc />
        </member>
        <member name="T:Akavache.KeyedOperationQueue">
            <summary>
            A key which has separate buckets for each key.
            </summary>
        </member>
        <member name="M:Akavache.KeyedOperationQueue.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.KeyedOperationQueue"/> class.
            </summary>
            <param name="scheduler">The scheduler for Observable operations.</param>
        </member>
        <member name="M:Akavache.KeyedOperationQueue.EnqueueOperation(System.String,System.Action)">
            <summary>
              Queue an operation to run in the background. All operations with the same key will run in sequence,
              waiting for the previous operation to complete.
            </summary>
            <param name = "key">The key to use.</param>
            <param name = "action">A method to run in the background.</param>
            <returns>A future representing when the operation completes.</returns>
        </member>
        <member name="M:Akavache.KeyedOperationQueue.EnqueueOperation``1(System.String,System.Func{``0})">
            <summary>
              Queue an operation to run in the background that returns a value. All operations with the same key will run in sequence,
              waiting for the previous operation to complete.
            </summary>
            <param name="key">The key to use.</param>
            <param name="calculationFunc">A method to run in the background that returns a single value.</param>
            <typeparam name="T">The type of item in the queue.</typeparam>
            <returns>A future value.</returns>
        </member>
        <member name="M:Akavache.KeyedOperationQueue.EnqueueObservableOperation``1(System.String,System.Func{System.IObservable{``0}})">
            <summary>
              Queue an operation to run in the background that returns a stream of values. All operations with the same key will run in sequence,
              waiting for the previous operation to complete.
              If you want to queue an operation that already returns IObservable, this is your guy.
            </summary>
            <param name="key">The key to use.</param>
            <param name="asyncCalculationFunc">A method to run in the background that returns a stream of values.</param>
            <typeparam name="T">The type of value in the queue.</typeparam>
            <returns>A future stream of values.</returns>
        </member>
        <member name="M:Akavache.KeyedOperationQueue.ShutdownQueue">
            <summary>
            Shuts the queue and stops it from processing.
            </summary>
            <returns>An observable that signals when the shutdown is complete.</returns>
        </member>
        <member name="M:Akavache.KeyedOperationQueue.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Akavache.KeyedOperationQueue.Dispose(System.Boolean)">
            <summary>
            Disposes of managed memory for the class.
            </summary>
            <param name="disposing">If this method is being called by the Dispose method.</param>
        </member>
        <member name="T:Akavache.LoginInfo">
            <summary>
            Stored login information for a user.
            </summary>
        </member>
        <member name="M:Akavache.LoginInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.LoginInfo"/> class.
            </summary>
            <param name="username">The username for the entry.</param>
            <param name="password">The password for the user.</param>
        </member>
        <member name="M:Akavache.LoginInfo.#ctor(System.Tuple{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Akavache.LoginInfo"/> class.
            </summary>
            <param name="usernameAndLogin">A username and password stored in a tuple.</param>
        </member>
        <member name="P:Akavache.LoginInfo.UserName">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:Akavache.LoginInfo.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="T:Akavache.LoginMixin">
            <summary>
            Helper methods that assist with login operations and storing related data.
            </summary>
        </member>
        <member name="M:Akavache.LoginMixin.SaveLogin(Akavache.ISecureBlobCache,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Save a user/password combination in a secure blob cache. Note that
            this method only allows exactly *one* user/pass combo to be saved,
            calling this more than once will overwrite the previous entry.
            </summary>
            <param name="blobCache">The blob cache where to store the data.</param>
            <param name="user">The user name to save.</param>
            <param name="password">The associated password.</param>
            <param name="host">The host to associate with the data.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>A observable which signals when the insert is completed.</returns>
        </member>
        <member name="M:Akavache.LoginMixin.GetLoginAsync(Akavache.ISecureBlobCache,System.String)">
            <summary>
            Returns the currently cached user/password. If the cache does not
            contain a user/password, this returns an Observable which
            OnError's with KeyNotFoundException.
            </summary>
            <param name="blobCache">The blob cache where to get the data.</param>
            <param name="host">The host associated with the data.</param>
            <returns>A Future result representing the user/password Tuple.</returns>
        </member>
        <member name="M:Akavache.LoginMixin.EraseLogin(Akavache.ISecureBlobCache,System.String)">
            <summary>
            Erases the login associated with the specified host.
            </summary>
            <param name="blobCache">The blob cache where to erase the data.</param>
            <param name="host">The host associated with the data.</param>
            <returns>A observable which signals when the erase is completed.</returns>
        </member>
        <member name="T:Akavache.Core.Registrations">
            <summary>
            Performs registration inside the Splat DI container.
            </summary>
        </member>
        <member name="M:Akavache.Core.Registrations.Register(Splat.IMutableDependencyResolver,Splat.IReadonlyDependencyResolver)">
            <inheritdoc />
        </member>
        <member name="T:Akavache.ProtectedData">
            <summary>
            A shim to allow the use of protected data.
            </summary>
        </member>
        <member name="M:Akavache.ProtectedData.Protect(System.Byte[],System.Byte[],Akavache.DataProtectionScope)">
            <summary>
            Protected the specified data.
            </summary>
            <param name="originalData">The original data being passed.</param>
            <param name="entropy">Entropy to help with randomness.</param>
            <param name="scope">The scope where to store the data.</param>
            <returns>The original data.</returns>
        </member>
        <member name="M:Akavache.ProtectedData.Unprotect(System.Byte[],System.Byte[],Akavache.DataProtectionScope)">
            <summary>
            Unprotected the specified data.
            </summary>
            <param name="originalData">The original data being passed.</param>
            <param name="entropy">Entropy to help with randomness.</param>
            <param name="scope">The scope where to store the data.</param>
            <returns>The original data.</returns>
        </member>
        <member name="T:Akavache.Internal.FileAccess">
            <summary>
            Gets a set of flags about the file access mode.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileAccess.Read">
            <summary>
            The file access is used for reading.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileAccess.Write">
            <summary>
            The file access is used for writing.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileAccess.ReadWrite">
            <summary>
            The file access is used for reading and writing.
            </summary>
        </member>
        <member name="T:Akavache.Internal.FileMode">
            <summary>
            Gets the file mode.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileMode.CreateNew">
            <summary>
            Creates the contents of the file.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileMode.Create">
            <summary>
            Creates a new file.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileMode.Open">
            <summary>
            Opens the file.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileMode.OpenOrCreate">
            <summary>
            Opens or creates the file.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileMode.Truncate">
            <summary>
            Truncates the file.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileMode.Append">
            <summary>
            Appends to the end of the file.
            </summary>
        </member>
        <member name="T:Akavache.Internal.FileShare">
            <summary>
            Flags about how the file should be shared on the file system.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileShare.None">
            <summary>
            There is no sharing.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileShare.Read">
            <summary>
            The file is shared for reading only.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileShare.Write">
            <summary>
            The file is for writing.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileShare.ReadWrite">
            <summary>
            The file sharing is for both reading and writing.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileShare.Delete">
            <summary>
            The file sharing is for deleting.
            </summary>
        </member>
        <member name="F:Akavache.Internal.FileShare.Inheritable">
            <summary>
            The file sharing is inheritable.
            </summary>
        </member>
        <member name="T:Akavache.IEncryptionProvider">
            <summary>
            Provides the ability to encrypt and decrypt byte blocks.
            </summary>
        </member>
        <member name="M:Akavache.IEncryptionProvider.EncryptBlock(System.Byte[])">
            <summary>
            Encrypts a specified block.
            </summary>
            <param name="block">The block to encrypt.</param>
            <returns>An observable with the encrypted value.</returns>
        </member>
        <member name="M:Akavache.IEncryptionProvider.DecryptBlock(System.Byte[])">
            <summary>
            Decrypts a specified block.
            </summary>
            <param name="block">The block to decrypt.</param>
            <returns>An observable with the decrypted value.</returns>
        </member>
        <member name="T:Akavache.IFilesystemProvider">
            <summary>
            An abstraction for the simple file operations that an IBlobCache can
            perform. Create a new instance of this when adapting IBlobCache to
            different platforms or backing stores, or for testing purposes.
            </summary>
        </member>
        <member name="M:Akavache.IFilesystemProvider.OpenFileForReadAsync(System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Open a file on a background thread, with the File object in 'async
            mode'. It is critical that this operation is deferred and returns
            immediately (i.e. wrapped in an Observable.Start).
            </summary>
            <param name="path">The path to the file.</param>
            <param name="scheduler">The scheduler to schedule the open under.</param>
            <returns>A Future result representing the Open file.</returns>
        </member>
        <member name="M:Akavache.IFilesystemProvider.OpenFileForWriteAsync(System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Open a file on a background thread, with the File object in 'async
            mode'. It is critical that this operation is deferred and returns
            immediately (i.e. wrapped in an Observable.Start).
            </summary>
            <param name="path">The path to the file.</param>
            <param name="scheduler">The scheduler to schedule the open under.</param>
            <returns>A Future result representing the Open file.</returns>
        </member>
        <member name="M:Akavache.IFilesystemProvider.CreateRecursive(System.String)">
            <summary>
            Create a directory and its parents. If the directory already
            exists, this method does nothing (i.e. it does not throw if a
            directory exists).
            </summary>
            <param name="path">The path to create.</param>
            <returns>A observable which signals when the create is finished.</returns>
        </member>
        <member name="M:Akavache.IFilesystemProvider.Delete(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>A observable which signals when the delete is finished.</returns>
        </member>
        <member name="M:Akavache.IFilesystemProvider.GetDefaultLocalMachineCacheDirectory">
            <summary>
            Gets the default local machine cache directory (i.e. the one for temporary data).
            </summary>
            <returns>The default local machine cache directory.</returns>
        </member>
        <member name="M:Akavache.IFilesystemProvider.GetDefaultRoamingCacheDirectory">
            <summary>
            Gets the default roaming cache directory (i.e. the one for user settings).
            </summary>
            <returns>The default roaming cache directory.</returns>
        </member>
        <member name="M:Akavache.IFilesystemProvider.GetDefaultSecretCacheDirectory">
            <summary>
            Gets the default roaming cache directory (i.e. the one for user settings).
            </summary>
            <returns>The default roaming cache directory.</returns>
        </member>
        <member name="T:Akavache.RelativeTimeMixin">
            <summary>
            A set of extension methods that assist with setting expiration times
            based on increments from the current time.
            </summary>
        </member>
        <member name="M:Akavache.RelativeTimeMixin.Insert(Akavache.IBlobCache,System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Inserts a item into the cache.
            </summary>
            <param name="blobCache">The blob cache to insert the item into.</param>
            <param name="key">The key to associate with the entry.</param>
            <param name="data">The data for the entry.</param>
            <param name="expiration">A timespan that will be added to the current DateTime.</param>
            <returns>A observable which will signal when the item is added.</returns>
        </member>
        <member name="M:Akavache.RelativeTimeMixin.InsertObject``1(Akavache.IBlobCache,System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a item into the cache.
            </summary>
            <param name="blobCache">The blob cache to insert the item into.</param>
            <param name="key">The key to associate with the entry.</param>
            <param name="value">The data for the entry.</param>
            <param name="expiration">A timespan that will be added to the current DateTime.</param>
            <typeparam name="T">The type of item to insert.</typeparam>
            <returns>A observable which will signal when the item is added.</returns>
        </member>
        <member name="M:Akavache.RelativeTimeMixin.DownloadUrl(Akavache.IBlobCache,System.String,System.TimeSpan,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Downloads the specified url if there is not already a entry in the cache.
            </summary>
            <param name="blobCache">The blob cache to insert the item into.</param>
            <param name="url">The URL to download if not already in the cache.</param>
            <param name="expiration">A timespan that will be added to the current DateTime.</param>
            <param name="headers">The headers to specify when getting the entry.</param>
            <param name="fetchAlways">If we should fetch always and not return the cache entry if available.</param>
            <returns>A observable which will signal when the data is available.</returns>
        </member>
        <member name="M:Akavache.RelativeTimeMixin.DownloadUrl(Akavache.IBlobCache,System.Uri,System.TimeSpan,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Downloads the specified url if there is not already a entry in the cache.
            </summary>
            <param name="blobCache">The blob cache to insert the item into.</param>
            <param name="url">The URL to download if not already in the cache.</param>
            <param name="expiration">A timespan that will be added to the current DateTime.</param>
            <param name="headers">The headers to specify when getting the entry.</param>
            <param name="fetchAlways">If we should fetch always and not return the cache entry if available.</param>
            <returns>A observable which will signal when the data is available.</returns>
        </member>
        <member name="M:Akavache.RelativeTimeMixin.SaveLogin(Akavache.ISecureBlobCache,System.String,System.String,System.String,System.TimeSpan)">
            <summary>
            Saves a username and password.
            </summary>
            <param name="blobCache">The blob cache to insert the item into.</param>
            <param name="user">The username to store.</param>
            <param name="password">The password to store.</param>
            <param name="host">The host to store against.</param>
            <param name="expiration">A timespan that will be added to the current DateTime.</param>
            <returns>A observable which will signal when the item is added.</returns>
        </member>
        <member name="T:Akavache.SimpleFilesystemProvider">
            <summary>
            A wrapper around the file system.
            </summary>
        </member>
        <member name="M:Akavache.SimpleFilesystemProvider.OpenFileForReadAsync(System.String,System.Reactive.Concurrency.IScheduler)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.SimpleFilesystemProvider.OpenFileForWriteAsync(System.String,System.Reactive.Concurrency.IScheduler)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.SimpleFilesystemProvider.CreateRecursive(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.SimpleFilesystemProvider.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.SimpleFilesystemProvider.GetDefaultRoamingCacheDirectory">
            <inheritdoc />
        </member>
        <member name="M:Akavache.SimpleFilesystemProvider.GetDefaultSecretCacheDirectory">
            <inheritdoc />
        </member>
        <member name="M:Akavache.SimpleFilesystemProvider.GetDefaultLocalMachineCacheDirectory">
            <inheritdoc />
        </member>
        <member name="M:Akavache.SimpleFilesystemProvider.GetAssemblyDirectoryName">
            <summary>
            Gets the assembly directory name.
            </summary>
            <returns>The assembly directory name.</returns>
        </member>
        <member name="T:Akavache.AkavacheHttpMixin">
            <summary>
            A set of methods associated with accessing HTTP resources for a blob cache.
            </summary>
        </member>
        <member name="M:Akavache.AkavacheHttpMixin.DownloadUrl(Akavache.IBlobCache,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Download data from an HTTP URL and insert the result into the
            cache. If the data is already in the cache, this returns
            a cached value. The URL itself is used as the key.
            </summary>
            <param name="blobCache">The blob cache associated with the action.</param>
            <param name="url">The URL to download.</param>
            <param name="headers">An optional Dictionary containing the HTTP
            request headers.</param>
            <param name="fetchAlways">Force a web request to always be issued, skipping the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>The data downloaded from the URL.</returns>
        </member>
        <member name="M:Akavache.AkavacheHttpMixin.DownloadUrl(Akavache.IBlobCache,System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Download data from an HTTP URL and insert the result into the
            cache. If the data is already in the cache, this returns
            a cached value. The URL itself is used as the key.
            </summary>
            <param name="blobCache">The blob cache associated with the action.</param>
            <param name="url">The URL to download.</param>
            <param name="headers">An optional Dictionary containing the HTTP
            request headers.</param>
            <param name="fetchAlways">Force a web request to always be issued, skipping the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>The data downloaded from the URL.</returns>
        </member>
        <member name="M:Akavache.AkavacheHttpMixin.DownloadUrl(Akavache.IBlobCache,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Download data from an HTTP URL and insert the result into the
            cache. If the data is already in the cache, this returns
            a cached value. An explicit key is provided rather than the URL itself.
            </summary>
            <param name="blobCache">The blob cache associated with the action.</param>
            <param name="key">The key to store with.</param>
            <param name="url">The URL to download.</param>
            <param name="headers">An optional Dictionary containing the HTTP
            request headers.</param>
            <param name="fetchAlways">Force a web request to always be issued, skipping the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>The data downloaded from the URL.</returns>
        </member>
        <member name="M:Akavache.AkavacheHttpMixin.DownloadUrl(Akavache.IBlobCache,System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Nullable{System.DateTimeOffset})">
            <summary>
            Download data from an HTTP URL and insert the result into the
            cache. If the data is already in the cache, this returns
            a cached value. An explicit key is provided rather than the URL itself.
            </summary>
            <param name="blobCache">The blob cache associated with the action.</param>
            <param name="key">The key to store with.</param>
            <param name="url">The URL to download.</param>
            <param name="headers">An optional Dictionary containing the HTTP
            request headers.</param>
            <param name="fetchAlways">Force a web request to always be issued, skipping the cache.</param>
            <param name="absoluteExpiration">An optional expiration date.</param>
            <returns>The data downloaded from the URL.</returns>
        </member>
        <member name="T:Akavache.EncryptionProvider">
            <summary>
            Provides encryption for blob caching.
            </summary>
        </member>
        <member name="M:Akavache.EncryptionProvider.EncryptBlock(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Akavache.EncryptionProvider.DecryptBlock(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Akavache.Utility.LogErrors``1(System.IObservable{``0},System.String)">
            <summary>
            Logs the errors of the observable.
            </summary>
            <typeparam name="T">The type of observable member.</typeparam>
            <param name="observable">The observable.</param>
            <param name="message">The message to log.</param>
            <returns>An observable.</returns>
        </member>
        <member name="M:Akavache.Utility.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Copies a stream using async.
            </summary>
            <param name="stream">The stream to copy from.</param>
            <param name="destination">The stream to copy to.</param>
            <param name="scheduler">The scheduler to schedule on.</param>
            <returns>An observable that signals when the operation has finished.</returns>
        </member>
        <member name="T:Akavache.AndroidFilesystemProvider">
            <summary>
            The file system provider that understands the android.
            </summary>
        </member>
        <member name="M:Akavache.AndroidFilesystemProvider.OpenFileForReadAsync(System.String,System.Reactive.Concurrency.IScheduler)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.AndroidFilesystemProvider.OpenFileForWriteAsync(System.String,System.Reactive.Concurrency.IScheduler)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.AndroidFilesystemProvider.CreateRecursive(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.AndroidFilesystemProvider.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.AndroidFilesystemProvider.GetDefaultLocalMachineCacheDirectory">
            <inheritdoc />
        </member>
        <member name="M:Akavache.AndroidFilesystemProvider.GetDefaultRoamingCacheDirectory">
            <inheritdoc />
        </member>
        <member name="M:Akavache.AndroidFilesystemProvider.GetDefaultSecretCacheDirectory">
            <inheritdoc />
        </member>
        <member name="T:Akavache.IsolatedStorageProvider">
            <summary>
            A storage provided that uses isolated storage.
            </summary>
        </member>
        <member name="M:Akavache.IsolatedStorageProvider.OpenFileForReadAsync(System.String,System.Reactive.Concurrency.IScheduler)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.IsolatedStorageProvider.OpenFileForWriteAsync(System.String,System.Reactive.Concurrency.IScheduler)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.IsolatedStorageProvider.CreateRecursive(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.IsolatedStorageProvider.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Akavache.IsolatedStorageProvider.GetDefaultRoamingCacheDirectory">
            <inheritdoc />
        </member>
        <member name="M:Akavache.IsolatedStorageProvider.GetDefaultSecretCacheDirectory">
            <inheritdoc />
        </member>
        <member name="M:Akavache.IsolatedStorageProvider.GetDefaultLocalMachineCacheDirectory">
            <inheritdoc />
        </member>
        <member name="T:System.StreamMixins">
            <summary>
            A set of extension methods associated with the <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:System.StreamMixins.WriteAsyncRx(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to a stream and returns a observable.
            </summary>
            <param name="blobCache">The stream to write to.</param>
            <param name="data">The data to write.</param>
            <param name="start">The start location where to write from.</param>
            <param name="length">The length in bytes to read.</param>
            <returns>An observable that signals when the write operation has completed.</returns>
        </member>
    </members>
</doc>
